from src.assembler_6502_final import Assembler
from src.Bus import Bus
from src.Cpu import CPU

asm = Assembler()
source = open('test_all_instructions.asm','r',encoding='utf-8').read()
bin_data = asm.assemble(source)
print('Generated bytes:', len(bin_data))

bus = Bus()
cpu = CPU(bus)
start = 0x8000
for i,b in enumerate(bin_data):
    bus.write(start + i, b)

cpu.regs.pc = start

for step in range(200):
    opcode = bus.read(cpu.regs.pc)
    instr_func, mode_func, cycles = cpu.lookup[opcode]
    name = instr_func.__name__
    print(f"PC={cpu.regs.pc:04X} OPC={opcode:02X} -> {name} mode={mode_func.__name__} cycles={cycles}")
    if instr_func == cpu.XXX:
        print('ILLEGAL at', f"{cpu.regs.pc:04X}", hex(opcode))
        break
    cpu.clock()

print('Done')
